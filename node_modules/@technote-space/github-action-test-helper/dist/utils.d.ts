import type { Octokit } from './types.js';
import type { SpyInstance } from 'vitest';
export declare const setActionEnv: (rootDir: string) => {
    [key: string]: any;
};
export declare const testEnv: (rootDir?: string) => void;
export declare const testChildProcess: () => void;
export declare const setChildProcessParams: (params: {
    stdout?: string | ((command: string) => string) | undefined;
    stderr?: string | ((command: string) => string) | undefined;
    error?: Error | ((command: string) => Error | null) | undefined;
    code?: number | ((command: string) => number) | undefined;
}) => void;
export declare const testFs: (defaultExists?: boolean) => (boolean: any) => void;
export declare const spyOnStdout: () => SpyInstance;
export declare const stdoutCalledWith: (spyOnMock: SpyInstance, messages: string[]) => void;
export declare const stdoutContains: (spyOnMock: SpyInstance, messages: string[]) => void;
export declare const stdoutNotContains: (spyOnMock: SpyInstance, messages: string[]) => void;
export declare const spyOnExec: () => SpyInstance;
export declare const spyOnSpawn: () => SpyInstance;
export declare const execCalledWith: (spyOnMock: SpyInstance, messages: (string | any[])[]) => void;
export declare const execContains: (spyOnMock: SpyInstance, messages: string[]) => void;
export declare const execNotContains: (spyOnMock: SpyInstance, messages: string[]) => void;
export declare const getLogStdout: (value: any, prefix?: string) => string;
export declare const testProperties: (object: any, checks: {
    [key: string]: any;
}) => void;
export declare const getOctokit: (token?: string) => Octokit;
